%YAML 1.2
---
name: ION
file_extensions:
  - ion
scope: source.ion
contexts:
  prototype:
    - include: comments
  comments:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.ion
      push:
        - meta_scope: comment.block.documentation.ion
        - meta_include_prototype: false
        - match: \*/
          pop: true
    - match: /\*
      scope: punctuation.definition.comment.ion
      push:
        - meta_scope: comment.block.ion
        - meta_include_prototype: false
        - match: \*/
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.ion

  main:
    - include: value
  value:
    - include: nulltype
    - include: bool
    - include: timestamp
    - include: number
    - include: symbol
    - include: string
    - include: long-string
    - include: blob
    - include: s-exp
    - include: list
    - include: struct
  nulltype:
    - match: \bnull\.\b
      push:
        - meta_scope: constant.language.typed-null.ion
        - match: (?:null|bool|int|float|decimal|timestamp|string|symbol|blob|clob|struct|list|sexp)\b
          scope: constant.language.type.ion
          pop: true
        - match: '[a-zA-Z]+\b'
          scope: invalid.illegal.unrecognized-type
          pop: true
        - match: '[^a-zA-Z]+\b'
          scope: invalid.illegal.expected-type
          pop: true
    - match: \bnull\b
      scope: constant.language.null.ion
  bool:
    - match: \b(?:true|false)\b
      scope: constant.language.bool.ion
  timestamp:
    - match: |-
        (?x:
          (?:
            (?: \d{4}(T|-\d{2}(T|-\d{2}T?)))   # just a date with optional bits
            |                                  # ...or...
            (?: \d{4}-\d{2}-\d{2}              # full date
                T(\d{2}:\d{2})(:\d{2}(.\d+)?)? # time with optional seconds and fractional seconds
                (?: Z|[+-]\d{2}:\d{2})         # timezone
            )
          )(?=[\}\]\),"'\s]) # lookahead for numeric stop-character
        )
      scope: constant.numeric.timestamp.ion
  number:
    # handles special integers
    - match: -?0b[0-1](?:[0-1_]*[0-1])?(?=[\}\]\),"'\s])
      scope: constant.numeric.integer.binary.ion
    - match: -?0x[\da-fA-F](?:[\da-fA-F_]*[\da-fA-F])?(?=[\}\]\),"'\s])
      scope: constant.numeric.integer.hexadecimal.ion
    # handles real numbers and normal integers
    - match: |-
        (?x:        # turn on extended mode
          -?            # an optional minus
          (?:
            0               # a zero
            |               # ...or...
            [1-9]           # a 1-9 character
            (?: [\d_]*\d)?  # followed by zero or more digits
          )
          (?:
            (?:
              \.              # a period
              (?: [\d_]*\d)?  # followed by one or more digits
            )?
            (?:
              [eEdD]   # an e character
              [+-]?  # followed by an option +/-
              \d+    # followed by one or more digits
            )?       # make exponent optional
          )?         # make decimal portion optional
          (?=[\}\]\),"'\s]) # lookahead for numeric stop-character
        )
      scope: constant.numeric.ion

  symbol:
    - include: identifier
    - include: symbol-quoted
  identifier:
    - match: \b[A-Za-z_][A-Za-z_$0-9]*\b
      scope: variable.other.constant.symbol-identifier.ion
    - match: \$[A-Za-z_][A-Za-z_$0-9]*\b
      scope: keyword.other.symbol-reserved.ion
    - match: \$[0-9]+\b
      scope: constant.other.placeholder.symbol-id.ion
  symbol-quoted:
    - match: \'(?!\'\')
      scope: punctuation.definition.string.begin.ion
      push: inside-symbol
  inside-symbol:
    - meta_scope: variable.other.constant.symbol-quoted.ion
    - meta_include_prototype: false
    - match: "'"
      scope: punctuation.definition.string.end.ion
      pop: true
    - include: string-escape
    - match: $\n?
      scope: invalid.illegal.unclosed-string.ion
      pop: true

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.ion
      push: inside-string
  inside-string:
    - meta_scope: string.quoted.double.ion
    - meta_include_prototype: false
    - match: '"'
      scope: punctuation.definition.string.end.ion
      pop: true
    - include: string-escape
    - match: $\n?
      scope: invalid.illegal.unclosed-string.ion
      pop: true

  long-string:
    - match: "'''"
      scope: punctuation.definition.string.begin.ion
      push: inside-long-string
  inside-long-string:
    - meta_scope: string.quoted.triple.ion
    - meta_include_prototype: false
    - match: "'''"
      scope: punctuation.definition.string.end.ion
      set: concat-long-string
    - include: string-escape
  concat-long-string:
    - match: "'''"
      scope: punctuation.definition.string.begin.ion
      set: inside-long-string
    - match: (?=\S)
      pop: true

  blob:
    - match: "{{"
      scope: punctuation.section.braces.begin.ion
      push: inside-blob
  inside-blob:
    - meta_scope: meta.braces.ion
    - meta_include_prototype: false
    - match: "}}"
      scope: punctuation.section.braces.begin.ion
      pop: true
    - match: (?=")
      push:
        - meta_include_prototype: false
        - include: string
        - match: \s*(?=\})
          pop: true
        - match: '[^\s\}]'
          scope: invalid.illegal.unclosed-blob.ion
    - match: (?=''')
      push:
        - meta_include_prototype: false
        - include: long-string
        - match: \s*(?=\})
          pop: true
        - match: '[^\s\}]'
          scope: invalid.illegal.unclosed-blob.ion
    - match: '[\w/+]+=*(?=\s*\})'
      scope: markup.raw.inline.ion
    - match: '[^\s\}]'
      scope: invalid.illegal.expected-blob-data.ion


  string-escape:
    - match: |-
        (?x:                  # turn on extended mode
          \\                  # a literal backslash
          (?:                 # ...followed by...
            ['"\\/?0abtnfrv]  # one of these characters
            |                 # ...or...
            NL                # NL
            |                 # ...or...
            x                 # an x
            [0-9a-fA-F]{2}    # and two hex digits
            |                 # ...or...
            u                 # a u
            [0-9a-fA-F]{4}    # and four hex digits
            |                 # ...or...
            U                 # a U
            [0-9a-fA-F]{8}    # and four hex digits
          )
        )
      scope: constant.character.escape.ion
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.ion

  s-exp:
    # an ION S-Expression
    - match: '\('
      scope: punctuation.section.parens.begin.ion
      push:
        - meta_scope: meta.parens.ion
        - match: '\)'
          scope: punctuation.section.parens.end.ion
          pop: true
        - include: value
        - match: '[!#%&*+\-./;<=>?@^`|~]'
          scope: keyword.operator.ion
        - match: '[^\s\)]'
          scope: invalid.illegal.expected-parens-element.ion

  list:
    # an ION list (JSON array)
    - match: '\['
      scope: punctuation.section.sequence.begin.ion
      push:
        - meta_scope: meta.sequence.ion
        - match: '\]'
          scope: punctuation.section.sequence.end.ion
          pop: true
        - match: ''
          push:
            - match: '(,)|(?=\])'
              captures:
                1: invalid.illegal.expected-sequence-element.ion
              pop: true
            - match: (?=\S)
              set:
                - clear_scopes: 1
                - meta_scope: meta.sequence.element.ion
                - include: value
                - match: ''
                  set:
                    - match: '(,)|(?=\s*\])'
                      captures:
                        1: punctuation.separator.sequence.ion
                      pop: true
                    - match: '\s(?=[^\s,])|[^\s,]'
                      scope: invalid.illegal.expected-sequence-separator.ion
                      pop: true
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-sequence-element.ion

  struct:
    # an ION struct (JSON object)
    - match: '\{(?!\{)'
      scope: punctuation.section.mapping.begin.ion
      push:
        - meta_scope: meta.mapping.ion
        - match: '\}'
          scope: punctuation.section.mapping.end.ion
          pop: true
        - match: (?=")
          push:
            - clear_scopes: 1
            - meta_scope: meta.mapping.key.ion
            - meta_include_prototype: false
            - include: string
            - match: ''
              pop: true
        - match: (?=['A-Za-z_$])
          push:
            - clear_scopes: 1
            - meta_scope: meta.mapping.key.ion
            - meta_include_prototype: false
            - include: symbol
            - match: ''
              pop: true
        - match: ":"
          scope: punctuation.separator.mapping.key-value.ion
          push:
            - match: '(,)|(?=\})'
              captures:
                1: invalid.illegal.expected-mapping-value.ion
              pop: true
            - match: (?=\S)
              set:
                - clear_scopes: 1
                - meta_scope: meta.mapping.value.ion
                - include: value
                - match: ''
                  set:
                    - match: '(,)|(?=\s*\})'
                      captures:
                        1: punctuation.separator.mapping.pair.ion
                      pop: true
                    - match: '\s(?=[^\s,])|[^\s,]'
                      scope: invalid.illegal.expected-mapping-separator.ion
                      pop: true
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-mapping-key.ion
