%YAML 1.2
---
name: ION
file_extensions:
  - ion
scope: source.ion
contexts:
  prototype:
    - include: comments
  comments:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.ion
      push:
        - meta_scope: comment.block.documentation.ion
        - meta_include_prototype: false
        - match: \*/
          pop: true
    - match: /\*
      scope: punctuation.definition.comment.ion
      push:
        - meta_scope: comment.block.ion
        - meta_include_prototype: false
        - match: \*/
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.ion

  main:
    - include: value
  value:
    - include: constant
    - include: number
    - include: string
    - include: array
    - include: object
  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.ion
  number:
    # handles integer and decimal numbers
    - match: |-
        (?x:         # turn on extended mode
          -?         # an optional minus
          (?:
            0        # a zero
            |        # ...or...
            [1-9]    # a 1-9 character
            \d*      # followed by zero or more digits
          )
          (?:
            (?:
              \.     # a period
              \d+    # followed by one or more digits
            )?
            (?:
              [eE]   # an e character
              [+-]?  # followed by an option +/-
              \d+    # followed by one or more digits
            )?       # make exponent optional
          )?         # make decimal portion optional
        )
      scope: constant.numeric.ion
  string:
    - match: '"'
      scope: punctuation.definition.string.begin.ion
      push: inside-string
  inside-string:
    - meta_scope: string.quoted.double.ion
    - meta_include_prototype: false
    - match: '"'
      scope: punctuation.definition.string.end.ion
      pop: true
    - include: string-escape
    - match: $\n?
      scope: invalid.illegal.unclosed-string.ion
      pop: true

  string-escape:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["\\/bfnrt]     # one of these characters
            |               # ...or...
            u               # a u
            [0-9a-fA-F]{4}  # and four hex digits
          )
        )
      scope: constant.character.escape.ion
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.ion

  array:
    - match: '\['
      scope: punctuation.section.sequence.begin.ion
      push:
        - meta_scope: meta.sequence.ion
        - match: '\]'
          scope: punctuation.section.sequence.end.ion
          pop: true
        - include: value
        - match: ","
          scope: punctuation.separator.sequence.ion
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-sequence-separator.ion

  object:
    # a JSON object
    - match: '\{'
      scope: punctuation.section.mapping.begin.ion
      push:
        - meta_scope: meta.mapping.ion
        - match: '\}'
          scope: punctuation.section.mapping.end.ion
          pop: true
        - match: '"'
          scope: punctuation.definition.string.begin.ion
          push:
            - clear_scopes: 1
            - meta_scope: meta.mapping.key.ion string.quoted.double.ion
            - meta_include_prototype: false
            - include: inside-string
        - match: ":"
          scope: punctuation.separator.mapping.key-value.ion
          push:
            - match: '(,)|(?=\})'
              captures:
                1: invalid.illegal.expected-mapping-value.ion
              pop: true
            - match: (?=\S)
              set:
                - clear_scopes: 1
                - meta_scope: meta.mapping.value.ion
                - include: value
                - match: ''
                  set:
                    - match: '(,)|(?=\s*\})'
                      captures:
                        1: punctuation.separator.mapping.pair.ion
                      pop: true
                    - match: '\s(?=[^\s,])|[^\s,]'
                      scope: invalid.illegal.expected-mapping-separator.ion
                      pop: true
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-mapping-key.ion
